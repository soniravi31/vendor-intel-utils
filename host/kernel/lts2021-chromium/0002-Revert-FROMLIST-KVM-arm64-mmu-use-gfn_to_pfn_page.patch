From d12d1de7f72f47fa6eacd44b03c887f3362630c0 Mon Sep 17 00:00:00 2001
From: "C, Lakshmishree" <lakshmishree.c@intel.com>
Date: Wed, 25 May 2022 15:36:55 +0530
Subject: [PATCH] Revert "FROMLIST: KVM: arm64/mmu: use gfn_to_pfn_page"

This reverts commit 9a5646b44de993e2092cbc1c7240c61a8cd3486a.
Reverting as it causes device reboot during Android VM boot.

Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Signed-off-by: Lakshmishree C <lakshmishree.c@intel.com>
---
 arch/arm64/kvm/mmu.c | 27 ++++++++++-----------------
 1 file changed, 10 insertions(+), 17 deletions(-)

diff --git a/arch/arm64/kvm/mmu.c b/arch/arm64/kvm/mmu.c
index b8a787a4ccdd..fc39dfc04fca 100644
--- a/arch/arm64/kvm/mmu.c
+++ b/arch/arm64/kvm/mmu.c
@@ -1033,7 +1033,7 @@ static bool fault_supports_stage2_huge_mapping(struct kvm_memory_slot *memslot,
 static unsigned long
 transparent_hugepage_adjust(struct kvm *kvm, struct kvm_memory_slot *memslot,
 			    unsigned long hva, kvm_pfn_t *pfnp,
-			    struct page **page, phys_addr_t *ipap)
+			    phys_addr_t *ipap)
 {
 	kvm_pfn_t pfn = *pfnp;
 
@@ -1042,8 +1042,7 @@ transparent_hugepage_adjust(struct kvm *kvm, struct kvm_memory_slot *memslot,
 	 * sure that the HVA and IPA are sufficiently aligned and that the
 	 * block map is contained within the memslot.
 	 */
-	if (*page &&
-	    fault_supports_stage2_huge_mapping(memslot, hva, PMD_SIZE) &&
+	if (fault_supports_stage2_huge_mapping(memslot, hva, PMD_SIZE) &&
 	    get_user_mapping_size(kvm, hva) >= PMD_SIZE) {
 		/*
 		 * The address we faulted on is backed by a transparent huge
@@ -1064,11 +1063,10 @@ transparent_hugepage_adjust(struct kvm *kvm, struct kvm_memory_slot *memslot,
 		 * page accordingly.
 		 */
 		*ipap &= PMD_MASK;
-		put_page(*page);
+		kvm_release_pfn_clean(pfn);
 		pfn &= ~(PTRS_PER_PMD - 1);
+		get_page(pfn_to_page(pfn));
 		*pfnp = pfn;
-		*page = pfn_to_page(pfn);
-		get_page(*page);
 
 		return PMD_SIZE;
 	}
@@ -1255,7 +1253,6 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 	short vma_shift;
 	gfn_t gfn;
 	kvm_pfn_t pfn;
-	struct page *page;
 	bool logging_active = memslot_is_logging(memslot);
 	unsigned long fault_level = kvm_vcpu_trap_get_fault_level(vcpu);
 	unsigned long vma_pagesize, fault_granule;
@@ -1357,8 +1354,8 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 	 */
 	smp_rmb();
 
-	pfn = __gfn_to_pfn_page_memslot(memslot, gfn, false, NULL,
-					write_fault, &writable, NULL, &page);
+	pfn = __gfn_to_pfn_memslot(memslot, gfn, false, NULL,
+				   write_fault, &writable, NULL);
 	if (pfn == KVM_PFN_ERR_HWPOISON) {
 		kvm_send_hwpoison_signal(hva, vma_shift);
 		return 0;
@@ -1403,8 +1400,7 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 			vma_pagesize = fault_granule;
 		else
 			vma_pagesize = transparent_hugepage_adjust(kvm, memslot,
-								   hva,
-								   &pfn, &page,
+								   hva, &pfn,
 								   &fault_ipa);
 	}
 
@@ -1444,17 +1440,14 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 
 	/* Mark the page dirty only if the fault is handled successfully */
 	if (writable && !ret) {
-		if (page)
-			kvm_set_pfn_dirty(pfn);
+		kvm_set_pfn_dirty(pfn);
 		mark_page_dirty_in_slot(kvm, memslot, gfn);
 	}
 
 out_unlock:
 	spin_unlock(&kvm->mmu_lock);
-	if (page) {
-		kvm_set_pfn_accessed(pfn);
-		put_page(page);
-	}
+	kvm_set_pfn_accessed(pfn);
+	kvm_release_pfn_clean(pfn);
 	return ret != -EAGAIN ? ret : 0;
 }
 
-- 
2.17.1

